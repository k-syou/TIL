# Python 함수에 대한 설명

## 함수의 기본 설명
함수는 특정 작업을 수행하는 코드 블록입니다. 함수는 코드의 재사용성을 높이고, 코드의 가독성을 향상시키며, 유지보수를 쉽게 합니다. Python에서 함수는 `def` 키워드를 사용하여 정의합니다.

```python
def function_name(variable):
    # 함수 본문
    return_value = variable
    return return_value
```

## 반환 값이 없는 함수
반환 값이 없는 함수는 `return` 문을 사용하지 않거나, `return` 문 뒤에 아무 값도 명시하지 않는 함수입니다. 이러한 함수는 주로 작업을 수행하고, 결과를 반환하지 않는 경우에 사용됩니다. Python에서 반환 값이 없는 함수는 자동으로 `None`을 반환합니다.

```python
def hello():
    print("안녕하세요!")
```


## 매개변수
함수는 매개변수를 통해 외부로부터 값을 전달받을 수 있습니다. 매개변수는 함수 정의 시 괄호 안에 나열됩니다.

```python
def add(a, b):
    return a + b

result = add(3, 5)  # result는 8이 됩니다.
```
### 매개변수와 인자값의 차이에 대한 설명:
#### 매개변수 (Parameter):
- 함수나 메서드를 정의할 때, 입력으로 받을 값을 지정하는 변수입니다.
- 예를 들어, `function add(a, b)`에서 `a`와 `b`는 매개변수입니다.

#### 인자값 (Argument):
- 함수나 메서드를 호출할 때, 실제로 전달되는 값입니다.
- 예를 들어, `add(5, 3)`에서 `5`와 `3`은 인자값입니다.

#### 요약:
- 매개변수는 함수 정의 시 사용되고, 인자값은 함수 호출 시 사용됩니다.


## 재귀
재귀 함수는 자기 자신을 호출하는 함수입니다. 재귀는 반복적인 작업을 수행할 때 유용하지만, 종료 조건을 명확히 해야 합니다.

```python
def factorial(n):
    if n == 1:
        return 1
    else:
        return n * factorial(n - 1)

print(factorial(5))  # 120 출력
```

## 빌트인 함수
Python은 다양한 빌트인 함수를 제공합니다. 예를 들어, `len()`, `max()`, `min()`, `sum()` 등이 있습니다.

```python
numbers = [1, 2, 3, 4, 5]
print(len(numbers))  # 5 출력
print(max(numbers))  # 5 출력
print(min(numbers))  # 1 출력
print(sum(numbers))  # 15 출력
```

## map 함수
`map` 함수는 주어진 함수와 반복 가능한 객체(리스트 등)를 인자로 받아, 각 요소에 함수를 적용한 결과를 반환합니다.

```python
def square(x):
    return x * x

numbers = [1, 2, 3, 4, 5]
squared_numbers = map(square, numbers)
print(list(squared_numbers))  # [1, 4, 9, 16, 25] 출력
```

## zip 함수
`zip` 함수는 여러 개의 반복 가능한 객체를 인자로 받아, 동일한 인덱스에 있는 요소들을 튜플로 묶어주는 함수입니다.

```python
numbers = [1, 2, 3]
letters = ['a', 'b', 'c']
zipped = zip(numbers, letters)
print(list(zipped))  # [(1, 'a'), (2, 'b'), (3, 'c')] 출력
```

## 스코프 (Scope)
변수의 스코프는 변수가 유효한 범위를 의미합니다. Python에는 함수 내부의 로컬 스코프와 함수 외부의 글로벌 스코프가 있습니다.

```python
x = 10  # 글로벌 변수

def my_function():
    x = 5  # 로컬 변수
    print(x)

my_function()  # 5 출력
print(x)  # 10 출력
```

## global 사용법
함수 내부에서 글로벌 변수를 수정하려면 `global` 키워드를 사용해야 합니다.

```python
x = 10

def my_function():
    global x
    x = 5

my_function()
print(x)  # 5 출력
```

## 함수 스타일링
Python에서는 PEP 8 스타일 가이드를 따르는 것이 좋습니다. 함수 이름은 소문자와 밑줄을 사용하여 작성합니다.

```python
# Good
def calculate_total_price(price, tax):
    return price + (price * tax)

# Bad
def calc_price(p, t):
    return p + (p * t)
```

## 패킹과 언패킹
패킹은 여러 값을 하나의 변수에 묶는 것이고, 언패킹은 그 반대입니다.

```python
# 패킹
numbers = 1, 2, 3

# 언패킹
a, b, c = numbers
print(a, b, c)  # 1 2 3 출력
```

## 람다식
람다식은 익명 함수로, `lambda` 키워드를 사용하여 정의합니다. 주로 간단한 함수를 한 줄로 작성할 때 사용됩니다.

```python
add = lambda a, b: a + b
print(add(3, 5))  # 8 출력
```